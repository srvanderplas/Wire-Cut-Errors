---
title: "A Standard Engineer's Shop"
format: html
editor: visual
bibliography: ../references.bib
---

## Wire Cutting Surfaces

Basic Parameters

-   We will only count things someone might reasonably use to cut wires "on the fly" - scissors, x-acto knives, wire cutters, pliers, and so on. We excluded saw blades, most knives on pocket knives and multitools, chisels, screwdrivers, wrenches, and so on.

-   We're only counting tools which are easily available (not ransacking the whole shop to do this analysis). I did include the scissors available throughout the house, but this isn't a huge factor in the results of the analysis.

::: {#fig-shop-layout layout-ncol="2"}
![Shop Bench Tool rack](../fig/PXL_20231110_190517827.jpg)

![Shop Side Tool rack](../fig/PXL_20231110_190522765.jpg)

We consider only tools which might be easily used for wire cutting that are easily available.
:::

```{r}
#| label: tbl-shop-surfaces
#| tbl-cap: "Shop cutting surfaces. All lengths in cm."
#| echo: false
#| message: false
library(tibble)
library(dplyr)

cutting_surfaces <- tribble(
  ~type, ~length, ~surfaces, ~tools,
  "Pliers", 1, 2, 10,
  "Needlenose pliers", 1, 4, 3,
  "Side cutters", 1, 4, 1,
  "Side cutters", 2, 4, 2,
  "Scissors", 8.89, 2, 14,
  "Tin snips", 3.81, 2, 4,
  "Lineman pliers", 2, 4, 2,
  "Lineman pliers", 1, 4, 1,
  "Wire strippers", 1, 2, 2,
  "Kneep tongs", 2, 4, 1,
  "Kneep tongs", 3, 4, 1,
  "Utility knife blades", 7.62, 2, 50
) %>%
  mutate(total_cutting_length = length*surfaces*tools)

total_cutting_surface = sum(cutting_surfaces$total_cutting_length)

knitr::kable(cutting_surfaces)
```

In our shop we have approximately `r total_cutting_surface` cm of wire cutting surface, as shown in @tbl-shop-surfaces.

## Stranded Wire

Using the standard stranded wire that we happen to have in our electrical toolbox, we can measure the approximate pixels of each wire strand and compare to the approximate pixel measurement of the 1cm rule shown on the right side of the picture below. This is not precise to forensic standards, but is sufficient for an order-of-magnitude calculation.

![A sample of stranded wire of unknown gauge.](../fig/wire_stranded.png)

```{r}
#| echo: false
#| message: false
wire_meas <- c(
  5.8, 5.4, 5.4, 5.4, 6.1, 7.3, 6.1, 5.0, 6.0, 7.0, 6.0, 6.1, 5.0
)

cm_meas <- 346.4
wire_thickness_cm <- mean(wire_meas)/cm_meas

comparisons <- ceiling(total_cutting_surface/wire_thickness_cm)
```

Using the average of the `r length(wire_meas)` strands, we come up with a mean wire diameter of `r wire_thickness_cm` cm.

## Fundamental Problem

If a forensic analyst were to compare the end of a single fragment of stranded wire recovered from a crime scene to all of the tools easily available in our shop, he or she would have to do at least `r comparisons` comparisons, and likely multiple times this number to account for e.g. replication of marks, variability, partial offsets, etc.

We know that factors like cutting angle also make a difference in terms of what features are recorded, but for the moment we'll ignore this factor.

Even if we accept that the error rate for toolmark comparisons is extremely low, e.g. 0.003-0.005 as in @murdock2017 we can work out the chance of a random match in all of the comparisons as follows:

```{=tex}
\begin{align}
1 \text{ comp} & P(\text{Random match}) = 0.003 \\
& P(\text{No random match}) = 0.997\\
N \text{ comp} &  P(\text{no random matches in} N \text{ comp}) = 0.997^N\\
& P(\text{at least one random match in} N \text{ comp}) = 1 - 0.997^N = `r sprintf("%.06f", 1-0.997^comparisons)`
\end{align}
```
In fact, if we want to control for the overall random match probability amid $N$ comparisons, we can calculate what our estimated RMP for a single comparison might be:

Let $R_n:=\{\text{at least one random match in }n\text{ comparisons}\}$

```{=tex}
\begin{align}
P(R_1) = r
P(\overline{R_1}) = 1-r
P(R_n) = \left[1-r\right]^n
P(\overline{R_n}) = 1 - \left[P(\overline{R_1})\right]^n = 1 - \left[1 - r\right]^n
\end{align}
```
Thus, if we wish to control $P(R_n)$, we can calculate out $r$ accordingly: $$r = 1 - \left[1-P(R_n)\right]^{1/n}$$

```{r}
#| echo: false
#| message: false
library(ggplot2)
library(tidyr)
single_rmp = exp(seq(-1000, 0, .1))
N = c(10, 100, 1000, 10000, 100000)

res = crossing(single_rmp, N) %>%
  mutate(overall = 1 - (1 - single_rmp)^N)

ggplot(res, aes(x = single_rmp, y = overall, group = factor(N), color = factor(N))) + 
  geom_line() +
  coord_cartesian(xlim = c(0, 0.005), ylim = c(0.05, 1)) + 
  ylab("Probability of at least one random match\nin N comparisons") + 
  xlab("Probability of random match for 1 comparison") + 
  ggtitle("Wire Comparison Overall Random Match Probability") + 
  scale_color_discrete("# comparisons") + 
  theme_bw()

```

Fundamentally, once you start doing comparisons on wire cutting surfaces, you're in deep trouble - the total length of surfaces you might test in an investigation is large relative to the surface diameter of the evidence you may have. As a result, the probability of a random match is hard to control even with the assumption that a random match is extremely unlikely.
